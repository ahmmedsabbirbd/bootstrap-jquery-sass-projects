(function ($) { 

    /*** Scroll To Top */
    $(window).scroll(function(){
		  if ($(this).scrollTop() > 200) {
  			$('#scrollToTop').css({ bottom: "20px" });
  		} else {
  			$('#scrollToTop').css({ bottom: "-100%" });
  		}
  	});

    $('#scrollToTop').click(function(){
		$("html, body").animate({ scrollTop: 0 }, 500);
		return false;
	});

	var ua = window.navigator.userAgent;
	var isIE = /MSIE|Trident/.test(ua);

	if ( !isIE ) {
		//IE specific code goes here
		"use strict";
	}

    /*** Sticky header */
	$(window).scroll(function(){
		if($("body").scrollTop() > 0 || $("html").scrollTop() > 0) {
			$(".header").addClass("stop");
		} else {
			$(".header").removeClass("stop");
		}
	});

	/*** Sticky header */
	const body = document.body;
	const scrollUp = "scroll-up";
	const scrollDown = "scroll-down";
	let lastScroll = 100;

	window.addEventListener("scroll", () => {
	  	const currentScroll = window.pageYOffset;
	  	if (currentScroll <= 0) 
	  	{
	    	body.classList.remove(scrollUp);
	    	return;
	  	}

	  	if (currentScroll > lastScroll && !body.classList.contains(scrollDown)) 
	  	{
	    	// down
	    	body.classList.remove(scrollUp);
	    	body.classList.add(scrollDown);
	  	} 
	  	else if ( currentScroll < lastScroll && body.classList.contains(scrollDown) ) 
	  	{
	    	// up
	    	body.classList.remove(scrollDown);
	    	body.classList.add(scrollUp);
	  	}

	  	lastScroll = currentScroll;
	});

	/*** Navbar Menu */
    $('.navbar-toggle').sidr({
        name: 'sidr',
        side: 'right',
        source: '#sidr',
        displace: false,
        renaming: false,
    });

    $('.navbar-toggle.in').on('click', function(){
        $.sidr('close', 'sidr');
    });

    $(window).scroll(function(){
        if($("body").scrollTop() > 0 || $("html").scrollTop() > 0) {
           $.sidr('close', 'sidr');
           $('.navbar-toggler').removeClass('in');
        }
    });  

	/*** Header height = gutter height */
	function setGutterHeight(){
		var header = document.querySelector('.header'),
			  gutter = document.querySelector('.header-gutter');
		if (gutter) {
			gutter.style.height = header.offsetHeight + 'px';
		}
	}
	window.onload = setGutterHeight;
	window.onresize = setGutterHeight;
	
    /*** Generated by CoffeeScript 1.9.2 */
    function stickyKit() {
        var reset_scroll;

        $(function() {
            return $("[data-sticky_column]").stick_in_parent({
                parent: "[data-sticky_parent]",
                offset_top: 85,
                bottoming: true,
            });
        });

        reset_scroll = function() {
            var scroller;
            scroller = $("body,html");
            scroller.stop(true);

            if ($(window).scrollTop() !== 0) {
                scroller.animate({
                    scrollTop: 0
                }, "fast");
            }
            return scroller;
        };

        window.scroll_it = function() {
            var max;
            max = $(document).height() - $(window).height();

            return reset_scroll().animate({
                scrollTop: max
            }, max * 3).delay(100).animate({
                scrollTop: 0
            }, max * 3);
        };

        window.scroll_it_wobble = function() {
            var max, third;
            max = $(document).height() - $(window).height();
            third = Math.floor(max / 3);

            return reset_scroll().animate({
                scrollTop: third * 2
            }, max * 3).delay(100).animate({
                scrollTop: third
            }, max * 3).delay(100).animate({
                scrollTop: max
            }, max * 3).delay(100).animate({
                scrollTop: 0
            }, max * 3);
        };

        $(window).on("load", (function(_this) {
            return function(e) {
                return $(document.body).trigger("sticky_kit:recalc");
            };
        })(this));

        $(window).on("resize", (function(_this) {
            return function(e) {
                return $(document.body).trigger("sticky_kit:recalc");
            };
        })(this));
    }

    var window_width = $(window).width();

    if (window_width < 1200) {
        $(document.body).trigger("sticky_kit:detach");
    } else {
        stickyKit();
    }

    $( window ).resize(function() {
        window_width = $( window ).width();
        if (window_width < 1200) {
            $(document.body).trigger("sticky_kit:detach");
        } else {
            stickyKit();
        }
    });
	   
	/*** Image to SVG */
	$('img.svg').each(function(){
	    var $img = $(this);
	    var imgID = $img.attr('id');
	    var imgClass = $img.attr('class');
	    var imgURL = $img.attr('src');
	
	    $.get(imgURL, function(data) {
	        /*** Get the SVG tag, ignore the rest */
	        var $svg = $(data).find('svg');
	
	        /*** Add replaced image's ID to the new SVG */
	        if(typeof imgID !== 'undefined') {
	            $svg = $svg.attr('id', imgID);
	        }
	        /*** Add replaced image's classes to the new SVG */
	        if(typeof imgClass !== 'undefined') {
	            $svg = $svg.attr('class', imgClass+' replaced-svg');
	        }
	
	        /*** Remove any invalid XML tags as per http://validator.w3.org */
	        $svg = $svg.removeAttr('xmlns:a');
	        
	        /*** Check if the viewport is set, else we gonna set it if we can. */
	        if(!$svg.attr('viewBox') && $svg.attr('height') && $svg.attr('width')) {
	            $svg.attr('viewBox', '0 0 ' + $svg.attr('height') + ' ' + $svg.attr('width'))
	        }
	
	        /*** Replace image with new SVG  */
	        $img.replaceWith($svg);
	
	    }, 'xml');
	});

	// EDITOR 
    const rules = [
      {
        // name: "Block quote",
        pattern: /> ?((\w|\d|=| |>|<|-{0,2}|{|}|\[|\]|\(|\)|"|'|\/|=|\.|:|;){0,})\n/g,
        replace: "<div class='quote'>$1</div>"
      },
      {
        // name: "H1",
        pattern: /# ((\w|\d|=| |-{0,2}|>|<|{|}|\[|\]|\(|\)|"|'|\/|=|\.|:|\\|`)+)\n/g,
        replace: "<h6>$1</h6>"
      },
      {
        // name: "Line breaks",
        pattern: /\n+/g,
        replace: "<br>"
      },
      {
        // name: "Images with title",
        pattern: /\!\[((\w| )+)\]\((https?\:\/{2}(\w|\.|\/|\d|-|#|&|\?|=)+) +"(([0-9a-zA-Z]| |!|\?|#|=)+)" {0,}\)/g,
        replace: "<div class='media'><img data-scroll-zoom src='$3' href='$3' title='$5' alt='$1' height='30%'></div>"
      },
      {
        // name: "Images",
        pattern: /\!\[((\w| )+)\]\((https?\:\/{2}(\w|\.|\/|\d|-|#|&|\?|=)+)\)/g,
        replace: "<div class='media'><img data-scroll-zoom src='$3' href='$3' alt='$1' height='30%'></div>"
      },
      {
        // name: "Links",
        pattern: /\[\\?((\w| )+)\]\((https?\:\/{2}(\w|\.|\/|\d|-|#|\?|=|&)+)\)/g,
        replace: "<a target='_blank' href='$3'>$1</a>"
      },
      {
        // name: "Links with title",
        pattern: /\[((\w| )+)\]\((https?\:\/{2}(\w|\.|\/|\d|-|#|&)+) +"(([0-9a-zA-Z]| |!|\?|=)+)" {0,}\)/g,
        replace: "<a target='_blank' href='$3'>$5</a>"
      },
      {
        // name: "Horizontal line",
        pattern: /(-{3,}|_{3,}|\*{3,})<br>/g,
        replace: "<hr>"
      },
      {
        // name: "Bold",
        pattern: /(\_{2}|\*{2})((\w| |\(|\)|\[|\]|\/|\.|\,|\:|<|>|=|"|'|#)+)(\_{2}|\*{2})/g,
        replace: "<b>$2</b>"
      },
      {
        // name: "Italic",
        pattern: /(\_{1}|\*{1})((\w| |\(|\)|\[|\]|\/|\.|\,|\:|#)+)(\_{1}|\*{1})/g,
        replace: "<em>$2</em>"
      },
      {
        // name: "Strikethrough",
        pattern: /\~{2}((\w| |\(|\)|\[|\]|\/|\.|\,|\:|#)+)\~{2}/g,
        replace: "<strike>$1</strike>"
      },
      {
        // name: "Marked",
        pattern: /==((\w|\d|=| |-{0,2}|>|<|{|}|\[|\]|\(|\)|"|'|\/|=|\.|:)+)==/g,
        replace: "<mark>$1</mark>"
      },
      {
        // name: "Insert",
        pattern: /\+{2}((\w|\d|=| |-{0,2}|>|<|{|}|\[|\]|\(|\)|"|'|\/|=|\.|:)+)\+{2}<br>/,
        replace: "<ins>$1</ins><br>"
      },
      {
        // name: "Code block",
        pattern: /`{3}(\w| ){0,}<br>(.*?)`{3}/g,
        replace: "<pre class='code-block'><code>$2</code></pre>"
      },
      {
        // name: "Inline code",
        pattern: /`(.*?)`/g,
        replace: "<span class='code-inline'>$1</span>"
      },
      {
        // name: "Copyright",
        pattern: /\((c|C)\)/g,
        replace: "©"
      },
      {
        // name: "R thing",
        pattern: /\((r|R)\)/g,
        replace: "®"
      },
      {
        // name: "Trademark",
        pattern: /\((tm|TM)\)/g,
        replace: "™"
      },
      {
        // name: "Paragraph",
        pattern: /\((p|P)\)/g,
        replace: "§"
      },
      {
        // name: "Plus minus",
        pattern: /\+-/g,
        replace: "±"
      },
      {
        // name: "---",
        pattern: /---/g,
        replace: "—"
      },
      {
        // name: "--",
        pattern: /--/g,
        replace: "–"
      },
      {
        // name: ",",
        pattern: /,,/g,
        replace: ","
      },
      {
        // name: "???",
        pattern: /\?{3,}/g,
        replace: "???"
      },
      {
        // name: "!!!",
        pattern: /!{3,}/g,
        replace: "!!!"
      },
      {
        // name: "?..",
        pattern: /\?\.{3,}/g,
        replace: "?.."
      },
      {
        // name: "!..",
        pattern: /\!\.{3,}/g,
        replace: "!.."
      },
      {
        // name: "...",
        pattern: /\.{2,}/g,
        replace: "…"
      },
      {
        // name: "Autoconvert link",
        pattern: /(https?:\/\/(\w|\d|\.|-|\/|#|\?|=|&)+) /g,
        replace: "<a href='$1'>$1</a> "
      },
      {
        // name: "Autoconvert link with linebreak",
        pattern: /(https?:\/\/(\w|\d|\.|-|\/|#|\?|=|&)+)<br>/g,
        replace: "<a href='$1'>$1</a><br>"
      }
    ];
    const $editor = document.getElementById("coustom-edit"),
      $result = document.getElementById("coustom-result"),
      $helpinput = document.getElementById("help-input"),
      $helpoutput = document.getElementById("help-output");

    function renderMarkdownPreview() {
      let text = $editor.innerText;
      let help_text = $helpinput.innerText;

      for (let i = 0; i < rules.length; i++) {
        const rule = rules[i];
        text = text.replace(rule.pattern, rule.replace);
      }
      $result.innerHTML = text;

      for (let i = 0; i < rules.length; i++) {
        const help_rule = rules[i];
        console.log(text);
        help_text = help_text.replace(help_rule.pattern, help_rule.replace);
      }
      $helpoutput.innerHTML = help_text;
    }
    $editor.addEventListener("keyup", event => {
      renderMarkdownPreview();
    });
    $helpinput.addEventListener("keyup", event => {
      renderMarkdownPreview();
    });
    renderMarkdownPreview(); 

	/*** BrowserDetect */
	var BrowserDetect = {
	    init: function () {
	        this.browser = this.searchString(this.dataBrowser) || "Other";
	        this.version = this.searchVersion(navigator.userAgent) || this.searchVersion(navigator.appVersion) || "Unknown";
	    },
	    searchString: function (data) {
	        for (var i = 0; i < data.length; i++) {
	            var dataString = data[i].string;
	            this.versionSearchString = data[i].subString;

	            if (dataString.indexOf(data[i].subString) !== -1) {
	                return data[i].identity;
	            }
	        }
	    },
	    searchVersion: function (dataString) {
	        var index = dataString.indexOf(this.versionSearchString);
	        if (index === -1) {
	            return;
	        }

	        var rv = dataString.indexOf("rv:");
	        if (this.versionSearchString === "Trident" && rv !== -1) {
	            return parseFloat(dataString.substring(rv + 3));
	        } else {
	            return parseFloat(dataString.substring(index + this.versionSearchString.length + 1));
	        }
	    },

	    dataBrowser: [
	        {string: navigator.userAgent, subString: "Edge", identity: "MSEdge"},
	        {string: navigator.userAgent, subString: "MSIE", identity: "Explorer"},
	        {string: navigator.userAgent, subString: "Trident", identity: "Explorer"},
	        {string: navigator.userAgent, subString: "Firefox", identity: "Firefox"},
	        {string: navigator.userAgent, subString: "Opera", identity: "Opera"},  
	        {string: navigator.userAgent, subString: "OPR", identity: "Opera"},  

	        {string: navigator.userAgent, subString: "Chrome", identity: "Chrome"}, 
	        {string: navigator.userAgent, subString: "Safari", identity: "Safari"}       
	    ]
	};
	
	BrowserDetect.init();
	document.body.classList.add( BrowserDetect.browser );

}(jQuery));
